# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ExternalIdentifiersApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ExternalIdentifiersApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ExternalIdentifiersApi }) = "https://api.phylopic.org"

const _returntypes_get_namespaces_ExternalIdentifiersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{GetNamespaces200ResponseInner},
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_namespaces(_api::ExternalIdentifiersApi; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_namespaces_ExternalIdentifiersApi, "/namespaces", [])
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a list of authorized namespaces.

Returns a list of authorities (e.g., `ubio.org`) and the namespaces under them (e.g., `namebank`). These may be used to resolve external identifiers the *PhyloPic* nodes.

Params:
- accept::String
- build::Int64

Return: Vector{GetNamespaces200ResponseInner}, OpenAPI.Clients.ApiResponse
"""
function get_namespaces(_api::ExternalIdentifiersApi; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_namespaces(_api; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_namespaces(_api::ExternalIdentifiersApi, response_stream::Channel; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_namespaces(_api; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_resolve_object_ExternalIdentifiersApi = Dict{Regex,Type}(
    Regex("^" * replace("308", "x"=>".") * "\$") => TitledLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_resolve_object(_api::ExternalIdentifiersApi, authority::String, namespace::String, objectid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)



    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_resolve_object_ExternalIdentifiersApi, "/resolve/{authority}/{namespace}/{objectid}", [])
    OpenAPI.Clients.set_param(_ctx.path, "authority", authority)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "objectid", objectid)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Resolves an external identifier to the closest phylogenetic node.

Valid query parameters passed to this method are included in the returned `Location` header.

Params:
- authority::String (required)
- namespace::String (required)
- objectid::String (required)
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_parent_node::String
- embed_primary_image::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_resolve_object(_api::ExternalIdentifiersApi, authority::String, namespace::String, objectid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_object(_api, authority, namespace, objectid; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_resolve_object(_api::ExternalIdentifiersApi, response_stream::Channel, authority::String, namespace::String, objectid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_object(_api, authority, namespace, objectid; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_resolve_objects_ExternalIdentifiersApi = Dict{Regex,Type}(
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("308", "x"=>".") * "\$") => TitledLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("415", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_resolve_objects(_api::ExternalIdentifiersApi, authority::String, namespace::String, object_i_ds::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)



    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_resolve_objects_ExternalIdentifiersApi, "/resolve/{authority}/{namespace}", [])
    OpenAPI.Clients.set_param(_ctx.path, "authority", authority)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "objectIDs", object_i_ds)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Resolves a list of external identifiers under a single authorized namespace to a single phylogenetic node.

Identifiers toward the beginning of the list have priority. Subsequent identifiers are checked if a node cannot be found for an earlier identifier.

Params:
- authority::String (required)
- namespace::String (required)
- object_i_ds::String (required)
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_parent_node::String
- embed_primary_image::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_resolve_objects(_api::ExternalIdentifiersApi, authority::String, namespace::String, object_i_ds::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_objects(_api, authority, namespace, object_i_ds; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_resolve_objects(_api::ExternalIdentifiersApi, response_stream::Channel, authority::String, namespace::String, object_i_ds::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_objects(_api, authority, namespace, object_i_ds; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_post_resolve_objects_ExternalIdentifiersApi = Dict{Regex,Type}(
    Regex("^" * replace("301", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("415", "x"=>".") * "\$") => Errors,
)

function _oacinternal_post_resolve_objects(_api::ExternalIdentifiersApi, content_type::String, authority::String, namespace::String, request_body::Vector{String}; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)



    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_post_resolve_objects_ExternalIdentifiersApi, "/resolve/{authority}/{namespace}", [], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "authority", authority)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Content-Type", content_type)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""This method is deprecated. Use `getResolveObjects` instead.

Params:
- content_type::String (required)
- authority::String (required)
- namespace::String (required)
- request_body::Vector{String} (required)
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_parent_node::String
- embed_primary_image::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function post_resolve_objects(_api::ExternalIdentifiersApi, content_type::String, authority::String, namespace::String, request_body::Vector{String}; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_resolve_objects(_api, content_type, authority, namespace, request_body; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function post_resolve_objects(_api::ExternalIdentifiersApi, response_stream::Channel, content_type::String, authority::String, namespace::String, request_body::Vector{String}; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_resolve_objects(_api, content_type, authority, namespace, request_body; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_namespaces
export get_resolve_object
export get_resolve_objects
export post_resolve_objects
