# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SearchApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SearchApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SearchApi }) = "https://api.phylopic.org"

const _returntypes_get_autocomplete_SearchApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetAutocomplete200Response,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("308", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_autocomplete(_api::SearchApi, query::String; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_autocomplete_SearchApi, "/autocomplete", [])
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "query", query)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets suggestions for full names based on partial text.

Never returns more than 16 results. Results with the text toward the beginning are favored. The results can be clarified via `/nodes` or `/images`, using the `filter_name` query parameter. 

Params:
- query::String (required)
- accept::String
- build::Int64

Return: GetAutocomplete200Response, OpenAPI.Clients.ApiResponse
"""
function get_autocomplete(_api::SearchApi, query::String; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_autocomplete(_api, query; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_autocomplete(_api::SearchApi, response_stream::Channel, query::String; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_autocomplete(_api, query; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_images_SearchApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetImages200Response,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_images(_api::SearchApi; accept=nothing, build=nothing, embed_contributor=nothing, embed_general_node=nothing, embed_items=nothing, embed_nodes=nothing, embed_specific_node=nothing, filter_clade=nothing, filter_collection=nothing, filter_contributor=nothing, filter_created_after=nothing, filter_created_before=nothing, filter_license_by=nothing, filter_license_nc=nothing, filter_license_sa=nothing, filter_modified_after=nothing, filter_modified_before=nothing, filter_modified_file_after=nothing, filter_modified_file_before=nothing, filter_name=nothing, filter_node=nothing, page=nothing, _mediaType=nothing)
















    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_images_SearchApi, "/images", [])
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_contributor", embed_contributor)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_generalNode", embed_general_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_items", embed_items)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_nodes", embed_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_specificNode", embed_specific_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_clade", filter_clade)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_collection", filter_collection)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_contributor", filter_contributor)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_created_after", filter_created_after)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_created_before", filter_created_before)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_license_by", filter_license_by)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_license_nc", filter_license_nc)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_license_sa", filter_license_sa)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_modified_after", filter_modified_after)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_modified_before", filter_modified_before)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_modifiedFile_after", filter_modified_file_after)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_modifiedFile_before", filter_modified_file_before)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_name", filter_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_node", filter_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all images, or a filtered subset.

Images are listed from most recently approved to least recently approved, unless certain `filter_*` parameters are specified: - `filter_clade`: images are listed from most basal nodes to most deeply nested nodes. - `filter_name`: images are listed according to which one's nodes' names fit the search string best. - `filter_modified_after`, `filter_modified_before`: images are listed from most recently modified to least recently modified - `filter_modifiedFile_after`, `filter_modifiedFile_before: images are listed from ones with the most recently modified files to ones with the least recently modified files 

Params:
- accept::String
- build::Int64
- embed_contributor::String
- embed_general_node::String
- embed_items::String
- embed_nodes::String
- embed_specific_node::String
- filter_clade::String
- filter_collection::String
- filter_contributor::String
- filter_created_after::ZonedDateTime
- filter_created_before::ZonedDateTime
- filter_license_by::String
- filter_license_nc::String
- filter_license_sa::String
- filter_modified_after::ZonedDateTime
- filter_modified_before::ZonedDateTime
- filter_modified_file_after::ZonedDateTime
- filter_modified_file_before::ZonedDateTime
- filter_name::String
- filter_node::String
- page::Int64

Return: GetImages200Response, OpenAPI.Clients.ApiResponse
"""
function get_images(_api::SearchApi; accept=nothing, build=nothing, embed_contributor=nothing, embed_general_node=nothing, embed_items=nothing, embed_nodes=nothing, embed_specific_node=nothing, filter_clade=nothing, filter_collection=nothing, filter_contributor=nothing, filter_created_after=nothing, filter_created_before=nothing, filter_license_by=nothing, filter_license_nc=nothing, filter_license_sa=nothing, filter_modified_after=nothing, filter_modified_before=nothing, filter_modified_file_after=nothing, filter_modified_file_before=nothing, filter_name=nothing, filter_node=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_images(_api; accept=accept, build=build, embed_contributor=embed_contributor, embed_general_node=embed_general_node, embed_items=embed_items, embed_nodes=embed_nodes, embed_specific_node=embed_specific_node, filter_clade=filter_clade, filter_collection=filter_collection, filter_contributor=filter_contributor, filter_created_after=filter_created_after, filter_created_before=filter_created_before, filter_license_by=filter_license_by, filter_license_nc=filter_license_nc, filter_license_sa=filter_license_sa, filter_modified_after=filter_modified_after, filter_modified_before=filter_modified_before, filter_modified_file_after=filter_modified_file_after, filter_modified_file_before=filter_modified_file_before, filter_name=filter_name, filter_node=filter_node, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_images(_api::SearchApi, response_stream::Channel; accept=nothing, build=nothing, embed_contributor=nothing, embed_general_node=nothing, embed_items=nothing, embed_nodes=nothing, embed_specific_node=nothing, filter_clade=nothing, filter_collection=nothing, filter_contributor=nothing, filter_created_after=nothing, filter_created_before=nothing, filter_license_by=nothing, filter_license_nc=nothing, filter_license_sa=nothing, filter_modified_after=nothing, filter_modified_before=nothing, filter_modified_file_after=nothing, filter_modified_file_before=nothing, filter_name=nothing, filter_node=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_images(_api; accept=accept, build=build, embed_contributor=embed_contributor, embed_general_node=embed_general_node, embed_items=embed_items, embed_nodes=embed_nodes, embed_specific_node=embed_specific_node, filter_clade=filter_clade, filter_collection=filter_collection, filter_contributor=filter_contributor, filter_created_after=filter_created_after, filter_created_before=filter_created_before, filter_license_by=filter_license_by, filter_license_nc=filter_license_nc, filter_license_sa=filter_license_sa, filter_modified_after=filter_modified_after, filter_modified_before=filter_modified_before, filter_modified_file_after=filter_modified_file_after, filter_modified_file_before=filter_modified_file_before, filter_name=filter_name, filter_node=filter_node, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_nodes_SearchApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetNodes200Response,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("308", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_nodes(_api::SearchApi; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_items=nothing, embed_primary_image=nothing, embed_parent_node=nothing, filter_collection=nothing, filter_name=nothing, page=nothing, _mediaType=nothing)






    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_nodes_SearchApi, "/nodes", [])
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_items", embed_items)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_collection", filter_collection)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_name", filter_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all nodes, or a filtered subset.

Nodes are listed with the most basal node first, followed by subclades in order from smallest to largest.  If `filter_name` is passed, the nodes with names matching the search text are listed according to how early in the name the search text appears. 

Params:
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_items::String
- embed_primary_image::String
- embed_parent_node::String
- filter_collection::String
- filter_name::String
- page::Int64

Return: GetNodes200Response, OpenAPI.Clients.ApiResponse
"""
function get_nodes(_api::SearchApi; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_items=nothing, embed_primary_image=nothing, embed_parent_node=nothing, filter_collection=nothing, filter_name=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_nodes(_api; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_items=embed_items, embed_primary_image=embed_primary_image, embed_parent_node=embed_parent_node, filter_collection=filter_collection, filter_name=filter_name, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_nodes(_api::SearchApi, response_stream::Channel; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_items=nothing, embed_primary_image=nothing, embed_parent_node=nothing, filter_collection=nothing, filter_name=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_nodes(_api; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_items=embed_items, embed_primary_image=embed_primary_image, embed_parent_node=embed_parent_node, filter_collection=filter_collection, filter_name=filter_name, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_resolve_object_SearchApi = Dict{Regex,Type}(
    Regex("^" * replace("308", "x"=>".") * "\$") => TitledLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_resolve_object(_api::SearchApi, authority::String, namespace::String, objectid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)



    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_resolve_object_SearchApi, "/resolve/{authority}/{namespace}/{objectid}", [])
    OpenAPI.Clients.set_param(_ctx.path, "authority", authority)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "objectid", objectid)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Resolves an external identifier to the closest phylogenetic node.

Valid query parameters passed to this method are included in the returned `Location` header.

Params:
- authority::String (required)
- namespace::String (required)
- objectid::String (required)
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_parent_node::String
- embed_primary_image::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_resolve_object(_api::SearchApi, authority::String, namespace::String, objectid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_object(_api, authority, namespace, objectid; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_resolve_object(_api::SearchApi, response_stream::Channel, authority::String, namespace::String, objectid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_object(_api, authority, namespace, objectid; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_resolve_objects_SearchApi = Dict{Regex,Type}(
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("308", "x"=>".") * "\$") => TitledLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("415", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_resolve_objects(_api::SearchApi, authority::String, namespace::String, object_i_ds::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)



    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_resolve_objects_SearchApi, "/resolve/{authority}/{namespace}", [])
    OpenAPI.Clients.set_param(_ctx.path, "authority", authority)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "objectIDs", object_i_ds)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Resolves a list of external identifiers under a single authorized namespace to a single phylogenetic node.

Identifiers toward the beginning of the list have priority. Subsequent identifiers are checked if a node cannot be found for an earlier identifier.

Params:
- authority::String (required)
- namespace::String (required)
- object_i_ds::String (required)
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_parent_node::String
- embed_primary_image::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_resolve_objects(_api::SearchApi, authority::String, namespace::String, object_i_ds::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_objects(_api, authority, namespace, object_i_ds; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_resolve_objects(_api::SearchApi, response_stream::Channel, authority::String, namespace::String, object_i_ds::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_objects(_api, authority, namespace, object_i_ds; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_post_resolve_objects_SearchApi = Dict{Regex,Type}(
    Regex("^" * replace("301", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("415", "x"=>".") * "\$") => Errors,
)

function _oacinternal_post_resolve_objects(_api::SearchApi, content_type::String, authority::String, namespace::String, request_body::Vector{String}; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)



    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_post_resolve_objects_SearchApi, "/resolve/{authority}/{namespace}", [], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "authority", authority)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Content-Type", content_type)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""This method is deprecated. Use `getResolveObjects` instead.

Params:
- content_type::String (required)
- authority::String (required)
- namespace::String (required)
- request_body::Vector{String} (required)
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_parent_node::String
- embed_primary_image::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function post_resolve_objects(_api::SearchApi, content_type::String, authority::String, namespace::String, request_body::Vector{String}; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_resolve_objects(_api, content_type, authority, namespace, request_body; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function post_resolve_objects(_api::SearchApi, response_stream::Channel, content_type::String, authority::String, namespace::String, request_body::Vector{String}; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_resolve_objects(_api, content_type, authority, namespace, request_body; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_autocomplete
export get_images
export get_nodes
export get_resolve_object
export get_resolve_objects
export post_resolve_objects
