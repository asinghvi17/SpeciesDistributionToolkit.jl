# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct NodesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `NodesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ NodesApi }) = "https://api.phylopic.org"

const _returntypes_get_autocomplete_NodesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetAutocomplete200Response,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("308", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_autocomplete(_api::NodesApi, query::String; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_autocomplete_NodesApi, "/autocomplete", [])
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "query", query)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets suggestions for full names based on partial text.

Never returns more than 16 results. Results with the text toward the beginning are favored. The results can be clarified via `/nodes` or `/images`, using the `filter_name` query parameter. 

Params:
- query::String (required)
- accept::String
- build::Int64

Return: GetAutocomplete200Response, OpenAPI.Clients.ApiResponse
"""
function get_autocomplete(_api::NodesApi, query::String; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_autocomplete(_api, query; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_autocomplete(_api::NodesApi, response_stream::Channel, query::String; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_autocomplete(_api, query; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_lineage_NodesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetNodes200Response,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("308", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_lineage(_api::NodesApi, uuid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_primary_image=nothing, embed_parent_node=nothing, filter_name=nothing, page=nothing, _mediaType=nothing)




    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_lineage_NodesApi, "/nodes/{uuid}/lineage", [])
    OpenAPI.Clients.set_param(_ctx.path, "uuid", uuid)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_name", filter_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves the ancestral lineage for a given node.

The nodes are listed in order from least to most ancestral. That is, the first node is the specified node, the second is its parent node, and the last is the root node.

Params:
- uuid::String (required)
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_primary_image::String
- embed_parent_node::String
- filter_name::String
- page::Int64

Return: GetNodes200Response, OpenAPI.Clients.ApiResponse
"""
function get_lineage(_api::NodesApi, uuid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_primary_image=nothing, embed_parent_node=nothing, filter_name=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_lineage(_api, uuid; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_primary_image=embed_primary_image, embed_parent_node=embed_parent_node, filter_name=filter_name, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_lineage(_api::NodesApi, response_stream::Channel, uuid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_primary_image=nothing, embed_parent_node=nothing, filter_name=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_lineage(_api, uuid; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_primary_image=embed_primary_image, embed_parent_node=embed_parent_node, filter_name=filter_name, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_node_NodesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NodeWithEmbedded,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("308", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_node(_api::NodesApi, uuid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_primary_image=nothing, embed_parent_node=nothing, _mediaType=nothing)



    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_node_NodesApi, "/nodes/{uuid}", [])
    OpenAPI.Clients.set_param(_ctx.path, "uuid", uuid)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a specific phylogenetic node.

Params:
- uuid::String (required)
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_primary_image::String
- embed_parent_node::String

Return: NodeWithEmbedded, OpenAPI.Clients.ApiResponse
"""
function get_node(_api::NodesApi, uuid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_primary_image=nothing, embed_parent_node=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_node(_api, uuid; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_primary_image=embed_primary_image, embed_parent_node=embed_parent_node, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_node(_api::NodesApi, response_stream::Channel, uuid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_primary_image=nothing, embed_parent_node=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_node(_api, uuid; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_primary_image=embed_primary_image, embed_parent_node=embed_parent_node, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_nodes_NodesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetNodes200Response,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("308", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_nodes(_api::NodesApi; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_items=nothing, embed_primary_image=nothing, embed_parent_node=nothing, filter_collection=nothing, filter_name=nothing, page=nothing, _mediaType=nothing)






    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_nodes_NodesApi, "/nodes", [])
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_items", embed_items)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_collection", filter_collection)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_name", filter_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all nodes, or a filtered subset.

Nodes are listed with the most basal node first, followed by subclades in order from smallest to largest.  If `filter_name` is passed, the nodes with names matching the search text are listed according to how early in the name the search text appears. 

Params:
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_items::String
- embed_primary_image::String
- embed_parent_node::String
- filter_collection::String
- filter_name::String
- page::Int64

Return: GetNodes200Response, OpenAPI.Clients.ApiResponse
"""
function get_nodes(_api::NodesApi; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_items=nothing, embed_primary_image=nothing, embed_parent_node=nothing, filter_collection=nothing, filter_name=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_nodes(_api; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_items=embed_items, embed_primary_image=embed_primary_image, embed_parent_node=embed_parent_node, filter_collection=filter_collection, filter_name=filter_name, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_nodes(_api::NodesApi, response_stream::Channel; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_items=nothing, embed_primary_image=nothing, embed_parent_node=nothing, filter_collection=nothing, filter_name=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_nodes(_api; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_items=embed_items, embed_primary_image=embed_primary_image, embed_parent_node=embed_parent_node, filter_collection=filter_collection, filter_name=filter_name, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_resolve_object_NodesApi = Dict{Regex,Type}(
    Regex("^" * replace("308", "x"=>".") * "\$") => TitledLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_resolve_object(_api::NodesApi, authority::String, namespace::String, objectid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)



    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_resolve_object_NodesApi, "/resolve/{authority}/{namespace}/{objectid}", [])
    OpenAPI.Clients.set_param(_ctx.path, "authority", authority)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "objectid", objectid)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Resolves an external identifier to the closest phylogenetic node.

Valid query parameters passed to this method are included in the returned `Location` header.

Params:
- authority::String (required)
- namespace::String (required)
- objectid::String (required)
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_parent_node::String
- embed_primary_image::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_resolve_object(_api::NodesApi, authority::String, namespace::String, objectid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_object(_api, authority, namespace, objectid; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_resolve_object(_api::NodesApi, response_stream::Channel, authority::String, namespace::String, objectid::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_object(_api, authority, namespace, objectid; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_resolve_objects_NodesApi = Dict{Regex,Type}(
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("308", "x"=>".") * "\$") => TitledLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("415", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_resolve_objects(_api::NodesApi, authority::String, namespace::String, object_i_ds::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)



    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_resolve_objects_NodesApi, "/resolve/{authority}/{namespace}", [])
    OpenAPI.Clients.set_param(_ctx.path, "authority", authority)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "objectIDs", object_i_ds)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Resolves a list of external identifiers under a single authorized namespace to a single phylogenetic node.

Identifiers toward the beginning of the list have priority. Subsequent identifiers are checked if a node cannot be found for an earlier identifier.

Params:
- authority::String (required)
- namespace::String (required)
- object_i_ds::String (required)
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_parent_node::String
- embed_primary_image::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_resolve_objects(_api::NodesApi, authority::String, namespace::String, object_i_ds::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_objects(_api, authority, namespace, object_i_ds; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_resolve_objects(_api::NodesApi, response_stream::Channel, authority::String, namespace::String, object_i_ds::String; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_resolve_objects(_api, authority, namespace, object_i_ds; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_root_NodesApi = Dict{Regex,Type}(
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("308", "x"=>".") * "\$") => Link,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_root(_api::NodesApi; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)



    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_root_NodesApi, "/root", [])
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves the root phylogenetic node (the ancestor of all others).

Redirects to the appropriate `/nodes/{uuid}` endpoint.

Params:
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_parent_node::String
- embed_primary_image::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_root(_api::NodesApi; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_root(_api; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_root(_api::NodesApi, response_stream::Channel; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_root(_api; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_post_resolve_objects_NodesApi = Dict{Regex,Type}(
    Regex("^" * replace("301", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("415", "x"=>".") * "\$") => Errors,
)

function _oacinternal_post_resolve_objects(_api::NodesApi, content_type::String, authority::String, namespace::String, request_body::Vector{String}; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)



    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_post_resolve_objects_NodesApi, "/resolve/{authority}/{namespace}", [], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "authority", authority)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_childNodes", embed_child_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_parentNode", embed_parent_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_primaryImage", embed_primary_image)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Content-Type", content_type)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""This method is deprecated. Use `getResolveObjects` instead.

Params:
- content_type::String (required)
- authority::String (required)
- namespace::String (required)
- request_body::Vector{String} (required)
- accept::String
- build::Int64
- embed_child_nodes::String
- embed_parent_node::String
- embed_primary_image::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function post_resolve_objects(_api::NodesApi, content_type::String, authority::String, namespace::String, request_body::Vector{String}; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_resolve_objects(_api, content_type, authority, namespace, request_body; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function post_resolve_objects(_api::NodesApi, response_stream::Channel, content_type::String, authority::String, namespace::String, request_body::Vector{String}; accept=nothing, build=nothing, embed_child_nodes=nothing, embed_parent_node=nothing, embed_primary_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_resolve_objects(_api, content_type, authority, namespace, request_body; accept=accept, build=build, embed_child_nodes=embed_child_nodes, embed_parent_node=embed_parent_node, embed_primary_image=embed_primary_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_autocomplete
export get_lineage
export get_node
export get_nodes
export get_resolve_object
export get_resolve_objects
export get_root
export post_resolve_objects
