# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct GeneralApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `GeneralApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ GeneralApi }) = "https://api.phylopic.org"

const _returntypes_get_index_GeneralApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetIndex200Response,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_index(_api::GeneralApi; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_index_GeneralApi, "/", [])
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns API information and links to resources.

Params:
- accept::String
- build::Int64

Return: GetIndex200Response, OpenAPI.Clients.ApiResponse
"""
function get_index(_api::GeneralApi; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_index(_api; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_index(_api::GeneralApi, response_stream::Channel; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_index(_api; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_ping_GeneralApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_ping(_api::GeneralApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_ping_GeneralApi, "/ping", [])
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Checks if the API is operational.

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function ping(_api::GeneralApi; _mediaType=nothing)
    _ctx = _oacinternal_ping(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function ping(_api::GeneralApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_ping(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_index
export ping
