# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ContributorsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ContributorsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ContributorsApi }) = "https://api.phylopic.org"

const _returntypes_get_contributor_ContributorsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Contributor,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_contributor(_api::ContributorsApi, uuid::String; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_contributor_ContributorsApi, "/contributors/{uuid}", [])
    OpenAPI.Clients.set_param(_ctx.path, "uuid", uuid)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a specific contributing user.

Params:
- uuid::String (required)
- accept::String
- build::Int64

Return: Contributor, OpenAPI.Clients.ApiResponse
"""
function get_contributor(_api::ContributorsApi, uuid::String; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_contributor(_api, uuid; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_contributor(_api::ContributorsApi, response_stream::Channel, uuid::String; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_contributor(_api, uuid; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_contributors_ContributorsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetContributors200Response,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_contributors(_api::ContributorsApi; accept=nothing, build=nothing, embed_items=nothing, filter_collection=nothing, page=nothing, _mediaType=nothing)


    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_contributors_ContributorsApi, "/contributors", [])
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_items", embed_items)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_collection", filter_collection)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all contributing users.

Contributors are listed in order from those with the most uploaded images to those with the fewest.

Params:
- accept::String
- build::Int64
- embed_items::String
- filter_collection::String
- page::Int64

Return: GetContributors200Response, OpenAPI.Clients.ApiResponse
"""
function get_contributors(_api::ContributorsApi; accept=nothing, build=nothing, embed_items=nothing, filter_collection=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_contributors(_api; accept=accept, build=build, embed_items=embed_items, filter_collection=filter_collection, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_contributors(_api::ContributorsApi, response_stream::Channel; accept=nothing, build=nothing, embed_items=nothing, filter_collection=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_contributors(_api; accept=accept, build=build, embed_items=embed_items, filter_collection=filter_collection, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_contributor
export get_contributors
