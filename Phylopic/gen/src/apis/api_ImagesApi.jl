# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ImagesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ImagesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ImagesApi }) = "https://api.phylopic.org"

const _returntypes_get_image_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ImageWithEmbedded,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_image(_api::ImagesApi, uuid::String; accept=nothing, build=nothing, embed_contributor=nothing, embed_general_node=nothing, embed_nodes=nothing, embed_specific_node=nothing, _mediaType=nothing)




    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_image_ImagesApi, "/images/{uuid}", [])
    OpenAPI.Clients.set_param(_ctx.path, "uuid", uuid)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_contributor", embed_contributor)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_generalNode", embed_general_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_nodes", embed_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_specificNode", embed_specific_node)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns data for a specific image.

Params:
- uuid::String (required)
- accept::String
- build::Int64
- embed_contributor::String
- embed_general_node::String
- embed_nodes::String
- embed_specific_node::String

Return: ImageWithEmbedded, OpenAPI.Clients.ApiResponse
"""
function get_image(_api::ImagesApi, uuid::String; accept=nothing, build=nothing, embed_contributor=nothing, embed_general_node=nothing, embed_nodes=nothing, embed_specific_node=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_image(_api, uuid; accept=accept, build=build, embed_contributor=embed_contributor, embed_general_node=embed_general_node, embed_nodes=embed_nodes, embed_specific_node=embed_specific_node, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_image(_api::ImagesApi, response_stream::Channel, uuid::String; accept=nothing, build=nothing, embed_contributor=nothing, embed_general_node=nothing, embed_nodes=nothing, embed_specific_node=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_image(_api, uuid; accept=accept, build=build, embed_contributor=embed_contributor, embed_general_node=embed_general_node, embed_nodes=embed_nodes, embed_specific_node=embed_specific_node, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_images_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetImages200Response,
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_images(_api::ImagesApi; accept=nothing, build=nothing, embed_contributor=nothing, embed_general_node=nothing, embed_items=nothing, embed_nodes=nothing, embed_specific_node=nothing, filter_clade=nothing, filter_collection=nothing, filter_contributor=nothing, filter_created_after=nothing, filter_created_before=nothing, filter_license_by=nothing, filter_license_nc=nothing, filter_license_sa=nothing, filter_modified_after=nothing, filter_modified_before=nothing, filter_modified_file_after=nothing, filter_modified_file_before=nothing, filter_name=nothing, filter_node=nothing, page=nothing, _mediaType=nothing)
















    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_images_ImagesApi, "/images", [])
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "embed_contributor", embed_contributor)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_generalNode", embed_general_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_items", embed_items)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_nodes", embed_nodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "embed_specificNode", embed_specific_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_clade", filter_clade)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_collection", filter_collection)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_contributor", filter_contributor)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_created_after", filter_created_after)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_created_before", filter_created_before)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_license_by", filter_license_by)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_license_nc", filter_license_nc)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_license_sa", filter_license_sa)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_modified_after", filter_modified_after)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_modified_before", filter_modified_before)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_modifiedFile_after", filter_modified_file_after)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_modifiedFile_before", filter_modified_file_before)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "filter_name", filter_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filter_node", filter_node)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all images, or a filtered subset.

Images are listed from most recently approved to least recently approved, unless certain `filter_*` parameters are specified: - `filter_clade`: images are listed from most basal nodes to most deeply nested nodes. - `filter_name`: images are listed according to which one's nodes' names fit the search string best. - `filter_modified_after`, `filter_modified_before`: images are listed from most recently modified to least recently modified - `filter_modifiedFile_after`, `filter_modifiedFile_before: images are listed from ones with the most recently modified files to ones with the least recently modified files 

Params:
- accept::String
- build::Int64
- embed_contributor::String
- embed_general_node::String
- embed_items::String
- embed_nodes::String
- embed_specific_node::String
- filter_clade::String
- filter_collection::String
- filter_contributor::String
- filter_created_after::ZonedDateTime
- filter_created_before::ZonedDateTime
- filter_license_by::String
- filter_license_nc::String
- filter_license_sa::String
- filter_modified_after::ZonedDateTime
- filter_modified_before::ZonedDateTime
- filter_modified_file_after::ZonedDateTime
- filter_modified_file_before::ZonedDateTime
- filter_name::String
- filter_node::String
- page::Int64

Return: GetImages200Response, OpenAPI.Clients.ApiResponse
"""
function get_images(_api::ImagesApi; accept=nothing, build=nothing, embed_contributor=nothing, embed_general_node=nothing, embed_items=nothing, embed_nodes=nothing, embed_specific_node=nothing, filter_clade=nothing, filter_collection=nothing, filter_contributor=nothing, filter_created_after=nothing, filter_created_before=nothing, filter_license_by=nothing, filter_license_nc=nothing, filter_license_sa=nothing, filter_modified_after=nothing, filter_modified_before=nothing, filter_modified_file_after=nothing, filter_modified_file_before=nothing, filter_name=nothing, filter_node=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_images(_api; accept=accept, build=build, embed_contributor=embed_contributor, embed_general_node=embed_general_node, embed_items=embed_items, embed_nodes=embed_nodes, embed_specific_node=embed_specific_node, filter_clade=filter_clade, filter_collection=filter_collection, filter_contributor=filter_contributor, filter_created_after=filter_created_after, filter_created_before=filter_created_before, filter_license_by=filter_license_by, filter_license_nc=filter_license_nc, filter_license_sa=filter_license_sa, filter_modified_after=filter_modified_after, filter_modified_before=filter_modified_before, filter_modified_file_after=filter_modified_file_after, filter_modified_file_before=filter_modified_file_before, filter_name=filter_name, filter_node=filter_node, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_images(_api::ImagesApi, response_stream::Channel; accept=nothing, build=nothing, embed_contributor=nothing, embed_general_node=nothing, embed_items=nothing, embed_nodes=nothing, embed_specific_node=nothing, filter_clade=nothing, filter_collection=nothing, filter_contributor=nothing, filter_created_after=nothing, filter_created_before=nothing, filter_license_by=nothing, filter_license_nc=nothing, filter_license_sa=nothing, filter_modified_after=nothing, filter_modified_before=nothing, filter_modified_file_after=nothing, filter_modified_file_before=nothing, filter_name=nothing, filter_node=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_images(_api; accept=accept, build=build, embed_contributor=embed_contributor, embed_general_node=embed_general_node, embed_items=embed_items, embed_nodes=embed_nodes, embed_specific_node=embed_specific_node, filter_clade=filter_clade, filter_collection=filter_collection, filter_contributor=filter_contributor, filter_created_after=filter_created_after, filter_created_before=filter_created_before, filter_license_by=filter_license_by, filter_license_nc=filter_license_nc, filter_license_sa=filter_license_sa, filter_modified_after=filter_modified_after, filter_modified_before=filter_modified_before, filter_modified_file_after=filter_modified_file_after, filter_modified_file_before=filter_modified_file_before, filter_name=filter_name, filter_node=filter_node, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_licenses_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{TitledLink},
    Regex("^" * replace("307", "x"=>".") * "\$") => Link,
    Regex("^" * replace("400", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("404", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("406", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("410", "x"=>".") * "\$") => Errors,
)

function _oacinternal_get_licenses(_api::ImagesApi; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_licenses_ImagesApi, "/licenses", [])
    OpenAPI.Clients.set_param(_ctx.query, "build", build)  # type Int64
    OpenAPI.Clients.set_param(_ctx.header, "Accept", accept)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a list of licenses.

Returns a list of all licenses that may be used for new submissions. Note that this does not include all licenses for all images in the database.

Params:
- accept::String
- build::Int64

Return: Vector{TitledLink}, OpenAPI.Clients.ApiResponse
"""
function get_licenses(_api::ImagesApi; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_licenses(_api; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_licenses(_api::ImagesApi, response_stream::Channel; accept=nothing, build=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_licenses(_api; accept=accept, build=build, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_post_upload_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Link,
    Regex("^" * replace("401", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("413", "x"=>".") * "\$") => Errors,
    Regex("^" * replace("415", "x"=>".") * "\$") => Errors,
)

function _oacinternal_post_upload(_api::ImagesApi, content_type::String, body::Vector{UInt8}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_post_upload_ImagesApi, "/uploads", ["bearerAuth", ], body)
    OpenAPI.Clients.set_param(_ctx.header, "Content-Type", content_type)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/vnd.phylopic.v2+json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["image/bmp", "image/gif", "image/jpeg", "image/png", "image/svg+xml", ] : [_mediaType])
    return _ctx
end

@doc raw"""Uploads a file

On success, redirects to a location where the file can be downloaded from.

Params:
- content_type::String (required)
- body::String (required)

Return: Link, OpenAPI.Clients.ApiResponse
"""
function post_upload(_api::ImagesApi, content_type::String, body::String; _mediaType=nothing)
    _ctx = _oacinternal_post_upload(_api, content_type, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function post_upload(_api::ImagesApi, response_stream::Channel, content_type::String, body::String; _mediaType=nothing)
    _ctx = _oacinternal_post_upload(_api, content_type, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_image
export get_images
export get_licenses
export post_upload
