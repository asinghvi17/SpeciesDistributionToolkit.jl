# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NodeWithEmbedded_allOf__embedded_parentNode

    NodeWithEmbeddedAllOfEmbeddedParentNode(;
        build=nothing,
        _links=nothing,
        created=nothing,
        uuid=nothing,
        names=nothing,
    )

    - build::Int64 : The index number of the build that this object belongs to.
    - _links::NodeAllOfLinks
    - created::ZonedDateTime : The time this was created.
    - uuid::String : The universally unique identifier for this entity.
    - names::Vector{Vector} : A list of all of this node&#39;s names, starting with the preferred name.
"""
Base.@kwdef mutable struct NodeWithEmbeddedAllOfEmbeddedParentNode <: OpenAPI.APIModel
    build::Union{Nothing, Int64} = nothing
    _links = nothing # spec type: Union{ Nothing, NodeAllOfLinks }
    created::Union{Nothing, ZonedDateTime} = nothing
    uuid::Union{Nothing, String} = nothing
    names::Union{Nothing, Vector{Vector}} = nothing

    function NodeWithEmbeddedAllOfEmbeddedParentNode(build, _links, created, uuid, names, )
        OpenAPI.validate_property(NodeWithEmbeddedAllOfEmbeddedParentNode, Symbol("build"), build)
        OpenAPI.validate_property(NodeWithEmbeddedAllOfEmbeddedParentNode, Symbol("_links"), _links)
        OpenAPI.validate_property(NodeWithEmbeddedAllOfEmbeddedParentNode, Symbol("created"), created)
        OpenAPI.validate_property(NodeWithEmbeddedAllOfEmbeddedParentNode, Symbol("uuid"), uuid)
        OpenAPI.validate_property(NodeWithEmbeddedAllOfEmbeddedParentNode, Symbol("names"), names)
        return new(build, _links, created, uuid, names, )
    end
end # type NodeWithEmbeddedAllOfEmbeddedParentNode

const _property_types_NodeWithEmbeddedAllOfEmbeddedParentNode = Dict{Symbol,String}(Symbol("build")=>"Int64", Symbol("_links")=>"NodeAllOfLinks", Symbol("created")=>"ZonedDateTime", Symbol("uuid")=>"String", Symbol("names")=>"Vector{Vector}", )
OpenAPI.property_type(::Type{ NodeWithEmbeddedAllOfEmbeddedParentNode }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NodeWithEmbeddedAllOfEmbeddedParentNode[name]))}

function check_required(o::NodeWithEmbeddedAllOfEmbeddedParentNode)
    o.build === nothing && (return false)
    o._links === nothing && (return false)
    o.created === nothing && (return false)
    o.uuid === nothing && (return false)
    o.names === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NodeWithEmbeddedAllOfEmbeddedParentNode }, name::Symbol, val)
    if name === Symbol("created")
        OpenAPI.validate_param(name, "NodeWithEmbeddedAllOfEmbeddedParentNode", :format, val, "date-time")
    end
    if name === Symbol("created")
        OpenAPI.validate_param(name, "NodeWithEmbeddedAllOfEmbeddedParentNode", :pattern, val, r"^\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[12][0-9]|3[01])T([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]\.\d{3}Z$")
    end
    if name === Symbol("uuid")
        OpenAPI.validate_param(name, "NodeWithEmbeddedAllOfEmbeddedParentNode", :format, val, "uuid")
    end
end
