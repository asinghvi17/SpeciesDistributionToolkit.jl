# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Image_allOf__links_sourceFile

    ImageAllOfLinksSourceFile(;
        href=nothing,
        sizes=nothing,
        type=nothing,
    )

    - href::Any
    - sizes::String
    - type::String
"""
Base.@kwdef mutable struct ImageAllOfLinksSourceFile <: OpenAPI.APIModel
    href::Union{Nothing, Any} = nothing
    sizes::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function ImageAllOfLinksSourceFile(href, sizes, type, )
        OpenAPI.validate_property(ImageAllOfLinksSourceFile, Symbol("href"), href)
        OpenAPI.validate_property(ImageAllOfLinksSourceFile, Symbol("sizes"), sizes)
        OpenAPI.validate_property(ImageAllOfLinksSourceFile, Symbol("type"), type)
        return new(href, sizes, type, )
    end
end # type ImageAllOfLinksSourceFile

const _property_types_ImageAllOfLinksSourceFile = Dict{Symbol,String}(Symbol("href")=>"Any", Symbol("sizes")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ ImageAllOfLinksSourceFile }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ImageAllOfLinksSourceFile[name]))}

function check_required(o::ImageAllOfLinksSourceFile)
    o.href === nothing && (return false)
    o.sizes === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ImageAllOfLinksSourceFile }, name::Symbol, val)
    if name === Symbol("sizes")
        OpenAPI.validate_param(name, "ImageAllOfLinksSourceFile", :pattern, val, r"^\d+x\d+$")
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "ImageAllOfLinksSourceFile", :format, val, "mimetype")
    end
end
