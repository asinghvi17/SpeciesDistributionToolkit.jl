# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Node_allOf__links_childNodes

    NodeAllOfLinksChildNodes(;
        href=nothing,
        title=nothing,
    )

    - href::String
    - title::String
"""
Base.@kwdef mutable struct NodeAllOfLinksChildNodes <: OpenAPI.APIModel
    href::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing

    function NodeAllOfLinksChildNodes(href, title, )
        OpenAPI.validate_property(NodeAllOfLinksChildNodes, Symbol("href"), href)
        OpenAPI.validate_property(NodeAllOfLinksChildNodes, Symbol("title"), title)
        return new(href, title, )
    end
end # type NodeAllOfLinksChildNodes

const _property_types_NodeAllOfLinksChildNodes = Dict{Symbol,String}(Symbol("href")=>"String", Symbol("title")=>"String", )
OpenAPI.property_type(::Type{ NodeAllOfLinksChildNodes }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NodeAllOfLinksChildNodes[name]))}

function check_required(o::NodeAllOfLinksChildNodes)
    o.href === nothing && (return false)
    o.title === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NodeAllOfLinksChildNodes }, name::Symbol, val)
    if name === Symbol("href")
        OpenAPI.validate_param(name, "NodeAllOfLinksChildNodes", :format, val, "url")
    end
end
