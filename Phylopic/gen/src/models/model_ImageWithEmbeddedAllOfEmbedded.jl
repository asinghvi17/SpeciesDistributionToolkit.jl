# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ImageWithEmbedded_allOf__embedded
Embedded entities related to the image. See &#x60;_links&#x60; for more information.

    ImageWithEmbeddedAllOfEmbedded(;
        contributor=nothing,
        generalNode=nothing,
        nodes=nothing,
        specificNode=nothing,
    )

    - contributor::Contributor
    - generalNode::ImageWithEmbeddedAllOfEmbeddedGeneralNode
    - nodes::Vector{Node}
    - specificNode::Node
"""
Base.@kwdef mutable struct ImageWithEmbeddedAllOfEmbedded <: OpenAPI.APIModel
    contributor = nothing # spec type: Union{ Nothing, Contributor }
    generalNode = nothing # spec type: Union{ Nothing, ImageWithEmbeddedAllOfEmbeddedGeneralNode }
    nodes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Node} }
    specificNode = nothing # spec type: Union{ Nothing, Node }

    function ImageWithEmbeddedAllOfEmbedded(contributor, generalNode, nodes, specificNode, )
        OpenAPI.validate_property(ImageWithEmbeddedAllOfEmbedded, Symbol("contributor"), contributor)
        OpenAPI.validate_property(ImageWithEmbeddedAllOfEmbedded, Symbol("generalNode"), generalNode)
        OpenAPI.validate_property(ImageWithEmbeddedAllOfEmbedded, Symbol("nodes"), nodes)
        OpenAPI.validate_property(ImageWithEmbeddedAllOfEmbedded, Symbol("specificNode"), specificNode)
        return new(contributor, generalNode, nodes, specificNode, )
    end
end # type ImageWithEmbeddedAllOfEmbedded

const _property_types_ImageWithEmbeddedAllOfEmbedded = Dict{Symbol,String}(Symbol("contributor")=>"Contributor", Symbol("generalNode")=>"ImageWithEmbeddedAllOfEmbeddedGeneralNode", Symbol("nodes")=>"Vector{Node}", Symbol("specificNode")=>"Node", )
OpenAPI.property_type(::Type{ ImageWithEmbeddedAllOfEmbedded }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ImageWithEmbeddedAllOfEmbedded[name]))}

function check_required(o::ImageWithEmbeddedAllOfEmbedded)
    true
end

function OpenAPI.validate_property(::Type{ ImageWithEmbeddedAllOfEmbedded }, name::Symbol, val)
end
