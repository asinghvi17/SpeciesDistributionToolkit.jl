# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PageWithEmbeddedImages

    PageWithEmbeddedImages(;
        build=nothing,
        _links=nothing,
        index=nothing,
        _embedded=nothing,
    )

    - build::Int64 : The index number of the build that this object belongs to.
    - _links::PageAllOfLinks
    - index::Int64 : The index of this page within the list of all pages (zero-based).
    - _embedded::PageWithEmbeddedImagesAllOfEmbedded
"""
Base.@kwdef mutable struct PageWithEmbeddedImages <: OpenAPI.APIModel
    build::Union{Nothing, Int64} = nothing
    _links = nothing # spec type: Union{ Nothing, PageAllOfLinks }
    index::Union{Nothing, Int64} = nothing
    _embedded = nothing # spec type: Union{ Nothing, PageWithEmbeddedImagesAllOfEmbedded }

    function PageWithEmbeddedImages(build, _links, index, _embedded, )
        OpenAPI.validate_property(PageWithEmbeddedImages, Symbol("build"), build)
        OpenAPI.validate_property(PageWithEmbeddedImages, Symbol("_links"), _links)
        OpenAPI.validate_property(PageWithEmbeddedImages, Symbol("index"), index)
        OpenAPI.validate_property(PageWithEmbeddedImages, Symbol("_embedded"), _embedded)
        return new(build, _links, index, _embedded, )
    end
end # type PageWithEmbeddedImages

const _property_types_PageWithEmbeddedImages = Dict{Symbol,String}(Symbol("build")=>"Int64", Symbol("_links")=>"PageAllOfLinks", Symbol("index")=>"Int64", Symbol("_embedded")=>"PageWithEmbeddedImagesAllOfEmbedded", )
OpenAPI.property_type(::Type{ PageWithEmbeddedImages }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PageWithEmbeddedImages[name]))}

function check_required(o::PageWithEmbeddedImages)
    o.build === nothing && (return false)
    o._links === nothing && (return false)
    o.index === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ PageWithEmbeddedImages }, name::Symbol, val)
end
