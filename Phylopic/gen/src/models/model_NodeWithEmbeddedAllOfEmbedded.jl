# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NodeWithEmbedded_allOf__embedded
Embedded entities related to the phylogenetic node. See &#x60;_links&#x60; for more information.

    NodeWithEmbeddedAllOfEmbedded(;
        childNodes=nothing,
        parentNode=nothing,
        primaryImage=nothing,
    )

    - childNodes::Vector{Node}
    - parentNode::NodeWithEmbeddedAllOfEmbeddedParentNode
    - primaryImage::NodeWithEmbeddedAllOfEmbeddedPrimaryImage
"""
Base.@kwdef mutable struct NodeWithEmbeddedAllOfEmbedded <: OpenAPI.APIModel
    childNodes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Node} }
    parentNode = nothing # spec type: Union{ Nothing, NodeWithEmbeddedAllOfEmbeddedParentNode }
    primaryImage = nothing # spec type: Union{ Nothing, NodeWithEmbeddedAllOfEmbeddedPrimaryImage }

    function NodeWithEmbeddedAllOfEmbedded(childNodes, parentNode, primaryImage, )
        OpenAPI.validate_property(NodeWithEmbeddedAllOfEmbedded, Symbol("childNodes"), childNodes)
        OpenAPI.validate_property(NodeWithEmbeddedAllOfEmbedded, Symbol("parentNode"), parentNode)
        OpenAPI.validate_property(NodeWithEmbeddedAllOfEmbedded, Symbol("primaryImage"), primaryImage)
        return new(childNodes, parentNode, primaryImage, )
    end
end # type NodeWithEmbeddedAllOfEmbedded

const _property_types_NodeWithEmbeddedAllOfEmbedded = Dict{Symbol,String}(Symbol("childNodes")=>"Vector{Node}", Symbol("parentNode")=>"NodeWithEmbeddedAllOfEmbeddedParentNode", Symbol("primaryImage")=>"NodeWithEmbeddedAllOfEmbeddedPrimaryImage", )
OpenAPI.property_type(::Type{ NodeWithEmbeddedAllOfEmbedded }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NodeWithEmbeddedAllOfEmbedded[name]))}

function check_required(o::NodeWithEmbeddedAllOfEmbedded)
    true
end

function OpenAPI.validate_property(::Type{ NodeWithEmbeddedAllOfEmbedded }, name::Symbol, val)
end
