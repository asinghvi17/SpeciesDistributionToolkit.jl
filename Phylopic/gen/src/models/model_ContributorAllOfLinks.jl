# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Contributor_allOf__links

    ContributorAllOfLinks(;
        contact=nothing,
        images=nothing,
        self=nothing,
    )

    - contact::ContributorAllOfLinksContact
    - images::ContributorAllOfLinksImages
    - self::TitledLink
"""
Base.@kwdef mutable struct ContributorAllOfLinks <: OpenAPI.APIModel
    contact = nothing # spec type: Union{ Nothing, ContributorAllOfLinksContact }
    images = nothing # spec type: Union{ Nothing, ContributorAllOfLinksImages }
    self = nothing # spec type: Union{ Nothing, TitledLink }

    function ContributorAllOfLinks(contact, images, self, )
        OpenAPI.validate_property(ContributorAllOfLinks, Symbol("contact"), contact)
        OpenAPI.validate_property(ContributorAllOfLinks, Symbol("images"), images)
        OpenAPI.validate_property(ContributorAllOfLinks, Symbol("self"), self)
        return new(contact, images, self, )
    end
end # type ContributorAllOfLinks

const _property_types_ContributorAllOfLinks = Dict{Symbol,String}(Symbol("contact")=>"ContributorAllOfLinksContact", Symbol("images")=>"ContributorAllOfLinksImages", Symbol("self")=>"TitledLink", )
OpenAPI.property_type(::Type{ ContributorAllOfLinks }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ContributorAllOfLinks[name]))}

function check_required(o::ContributorAllOfLinks)
    o.contact === nothing && (return false)
    o.images === nothing && (return false)
    o.self === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ContributorAllOfLinks }, name::Symbol, val)
end
