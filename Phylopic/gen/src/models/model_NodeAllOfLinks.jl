# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Node_allOf__links

    NodeAllOfLinks(;
        childNodes=nothing,
        cladeImages=nothing,
        contributor=nothing,
        external=nothing,
        images=nothing,
        lineage=nothing,
        parentNode=nothing,
        primaryImage=nothing,
        self=nothing,
    )

    - childNodes::Vector{NodeAllOfLinksChildNodes} : Links to all immediate descendant nodes, in alphabetical order. Note that this only includes illustrated nodes. 
    - cladeImages::NodeAllOfLinksCladeImages
    - contributor::NodeAllOfLinksContributor
    - external::Vector{TitledLink} : Links to the same node under other domains (for example, *Encyclopedia of Life*).
    - images::NodeAllOfLinksImages
    - lineage::NodeAllOfLinksLineage
    - parentNode::NodeAllOfLinksParentNode
    - primaryImage::NodeAllOfLinksPrimaryImage
    - self::TitledLink
"""
Base.@kwdef mutable struct NodeAllOfLinks <: OpenAPI.APIModel
    childNodes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NodeAllOfLinksChildNodes} }
    cladeImages = nothing # spec type: Union{ Nothing, NodeAllOfLinksCladeImages }
    contributor = nothing # spec type: Union{ Nothing, NodeAllOfLinksContributor }
    external::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TitledLink} }
    images = nothing # spec type: Union{ Nothing, NodeAllOfLinksImages }
    lineage = nothing # spec type: Union{ Nothing, NodeAllOfLinksLineage }
    parentNode = nothing # spec type: Union{ Nothing, NodeAllOfLinksParentNode }
    primaryImage = nothing # spec type: Union{ Nothing, NodeAllOfLinksPrimaryImage }
    self = nothing # spec type: Union{ Nothing, TitledLink }

    function NodeAllOfLinks(childNodes, cladeImages, contributor, external, images, lineage, parentNode, primaryImage, self, )
        OpenAPI.validate_property(NodeAllOfLinks, Symbol("childNodes"), childNodes)
        OpenAPI.validate_property(NodeAllOfLinks, Symbol("cladeImages"), cladeImages)
        OpenAPI.validate_property(NodeAllOfLinks, Symbol("contributor"), contributor)
        OpenAPI.validate_property(NodeAllOfLinks, Symbol("external"), external)
        OpenAPI.validate_property(NodeAllOfLinks, Symbol("images"), images)
        OpenAPI.validate_property(NodeAllOfLinks, Symbol("lineage"), lineage)
        OpenAPI.validate_property(NodeAllOfLinks, Symbol("parentNode"), parentNode)
        OpenAPI.validate_property(NodeAllOfLinks, Symbol("primaryImage"), primaryImage)
        OpenAPI.validate_property(NodeAllOfLinks, Symbol("self"), self)
        return new(childNodes, cladeImages, contributor, external, images, lineage, parentNode, primaryImage, self, )
    end
end # type NodeAllOfLinks

const _property_types_NodeAllOfLinks = Dict{Symbol,String}(Symbol("childNodes")=>"Vector{NodeAllOfLinksChildNodes}", Symbol("cladeImages")=>"NodeAllOfLinksCladeImages", Symbol("contributor")=>"NodeAllOfLinksContributor", Symbol("external")=>"Vector{TitledLink}", Symbol("images")=>"NodeAllOfLinksImages", Symbol("lineage")=>"NodeAllOfLinksLineage", Symbol("parentNode")=>"NodeAllOfLinksParentNode", Symbol("primaryImage")=>"NodeAllOfLinksPrimaryImage", Symbol("self")=>"TitledLink", )
OpenAPI.property_type(::Type{ NodeAllOfLinks }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NodeAllOfLinks[name]))}

function check_required(o::NodeAllOfLinks)
    o.childNodes === nothing && (return false)
    o.cladeImages === nothing && (return false)
    o.contributor === nothing && (return false)
    o.external === nothing && (return false)
    o.images === nothing && (return false)
    o.lineage === nothing && (return false)
    o.parentNode === nothing && (return false)
    o.primaryImage === nothing && (return false)
    o.self === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NodeAllOfLinks }, name::Symbol, val)
end
