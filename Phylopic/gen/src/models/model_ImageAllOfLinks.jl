# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Image_allOf__links

    ImageAllOfLinks(;
        contributor=nothing,
        generalNode=nothing,
        var"http://ogp.me/ns#image"=nothing,
        license=nothing,
        nodes=nothing,
        rasterFiles=nothing,
        self=nothing,
        sourceFile=nothing,
        specificNode=nothing,
        thumbnailFiles=nothing,
        vectorFile=nothing,
    )

    - contributor::ImageAllOfLinksContributor
    - generalNode::ImageAllOfLinksGeneralNode
    - var"http://ogp.me/ns#image"::ImageAllOfLinksHttpOgpMeNsImage
    - license::ImageAllOfLinksLicense
    - nodes::Vector{TitledLink} : Links to all nodes that this image illustrates, based on &#x60;specificNode&#x60; and (if provided) &#x60;generalNode&#x60;.
    - rasterFiles::Vector{MediaLink} : A list of links to raster image files (PNG format) of various sizes.
    - self::TitledLink
    - sourceFile::ImageAllOfLinksSourceFile
    - specificNode::ImageAllOfLinksSpecificNode
    - thumbnailFiles::Vector{MediaLink} : A list of links to raster thumbnail image files (PNG format) of various square sizes.
    - vectorFile::ImageAllOfLinksVectorFile
"""
Base.@kwdef mutable struct ImageAllOfLinks <: OpenAPI.APIModel
    contributor = nothing # spec type: Union{ Nothing, ImageAllOfLinksContributor }
    generalNode = nothing # spec type: Union{ Nothing, ImageAllOfLinksGeneralNode }
    var"http://ogp.me/ns#image" = nothing # spec type: Union{ Nothing, ImageAllOfLinksHttpOgpMeNsImage }
    license = nothing # spec type: Union{ Nothing, ImageAllOfLinksLicense }
    nodes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TitledLink} }
    rasterFiles::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{MediaLink} }
    self = nothing # spec type: Union{ Nothing, TitledLink }
    sourceFile = nothing # spec type: Union{ Nothing, ImageAllOfLinksSourceFile }
    specificNode = nothing # spec type: Union{ Nothing, ImageAllOfLinksSpecificNode }
    thumbnailFiles::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{MediaLink} }
    vectorFile = nothing # spec type: Union{ Nothing, ImageAllOfLinksVectorFile }

    function ImageAllOfLinks(contributor, generalNode, var"http://ogp.me/ns#image", license, nodes, rasterFiles, self, sourceFile, specificNode, thumbnailFiles, vectorFile, )
        OpenAPI.validate_property(ImageAllOfLinks, Symbol("contributor"), contributor)
        OpenAPI.validate_property(ImageAllOfLinks, Symbol("generalNode"), generalNode)
        OpenAPI.validate_property(ImageAllOfLinks, Symbol("http://ogp.me/ns#image"), var"http://ogp.me/ns#image")
        OpenAPI.validate_property(ImageAllOfLinks, Symbol("license"), license)
        OpenAPI.validate_property(ImageAllOfLinks, Symbol("nodes"), nodes)
        OpenAPI.validate_property(ImageAllOfLinks, Symbol("rasterFiles"), rasterFiles)
        OpenAPI.validate_property(ImageAllOfLinks, Symbol("self"), self)
        OpenAPI.validate_property(ImageAllOfLinks, Symbol("sourceFile"), sourceFile)
        OpenAPI.validate_property(ImageAllOfLinks, Symbol("specificNode"), specificNode)
        OpenAPI.validate_property(ImageAllOfLinks, Symbol("thumbnailFiles"), thumbnailFiles)
        OpenAPI.validate_property(ImageAllOfLinks, Symbol("vectorFile"), vectorFile)
        return new(contributor, generalNode, var"http://ogp.me/ns#image", license, nodes, rasterFiles, self, sourceFile, specificNode, thumbnailFiles, vectorFile, )
    end
end # type ImageAllOfLinks

const _property_types_ImageAllOfLinks = Dict{Symbol,String}(Symbol("contributor")=>"ImageAllOfLinksContributor", Symbol("generalNode")=>"ImageAllOfLinksGeneralNode", Symbol("http://ogp.me/ns#image")=>"ImageAllOfLinksHttpOgpMeNsImage", Symbol("license")=>"ImageAllOfLinksLicense", Symbol("nodes")=>"Vector{TitledLink}", Symbol("rasterFiles")=>"Vector{MediaLink}", Symbol("self")=>"TitledLink", Symbol("sourceFile")=>"ImageAllOfLinksSourceFile", Symbol("specificNode")=>"ImageAllOfLinksSpecificNode", Symbol("thumbnailFiles")=>"Vector{MediaLink}", Symbol("vectorFile")=>"ImageAllOfLinksVectorFile", )
OpenAPI.property_type(::Type{ ImageAllOfLinks }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ImageAllOfLinks[name]))}

function check_required(o::ImageAllOfLinks)
    o.contributor === nothing && (return false)
    o.generalNode === nothing && (return false)
    o.var"http://ogp.me/ns#image" === nothing && (return false)
    o.license === nothing && (return false)
    o.nodes === nothing && (return false)
    o.rasterFiles === nothing && (return false)
    o.self === nothing && (return false)
    o.sourceFile === nothing && (return false)
    o.specificNode === nothing && (return false)
    o.thumbnailFiles === nothing && (return false)
    o.vectorFile === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ImageAllOfLinks }, name::Symbol, val)
end
