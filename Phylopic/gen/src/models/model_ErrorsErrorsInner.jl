# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Errors_errors_inner

    ErrorsErrorsInner(;
        developerMessage=nothing,
        documentation=nothing,
        field=nothing,
        type=nothing,
        userMessage=nothing,
    )

    - developerMessage::String : A message with details for developers.
    - documentation::String : A link to documentation for the error.
    - field::String : Identifies the parameter that caused the error.
    - type::String : The type of error, from [this list](https://docs.aws.amazon.com/apigateway/api-reference/resource/gateway-response/#responseType).
    - userMessage::String : A message to be presented to the user.
"""
Base.@kwdef mutable struct ErrorsErrorsInner <: OpenAPI.APIModel
    developerMessage::Union{Nothing, String} = nothing
    documentation::Union{Nothing, String} = nothing
    field::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    userMessage::Union{Nothing, String} = nothing

    function ErrorsErrorsInner(developerMessage, documentation, field, type, userMessage, )
        OpenAPI.validate_property(ErrorsErrorsInner, Symbol("developerMessage"), developerMessage)
        OpenAPI.validate_property(ErrorsErrorsInner, Symbol("documentation"), documentation)
        OpenAPI.validate_property(ErrorsErrorsInner, Symbol("field"), field)
        OpenAPI.validate_property(ErrorsErrorsInner, Symbol("type"), type)
        OpenAPI.validate_property(ErrorsErrorsInner, Symbol("userMessage"), userMessage)
        return new(developerMessage, documentation, field, type, userMessage, )
    end
end # type ErrorsErrorsInner

const _property_types_ErrorsErrorsInner = Dict{Symbol,String}(Symbol("developerMessage")=>"String", Symbol("documentation")=>"String", Symbol("field")=>"String", Symbol("type")=>"String", Symbol("userMessage")=>"String", )
OpenAPI.property_type(::Type{ ErrorsErrorsInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ErrorsErrorsInner[name]))}

function check_required(o::ErrorsErrorsInner)
    o.developerMessage === nothing && (return false)
    o.type === nothing && (return false)
    o.userMessage === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ErrorsErrorsInner }, name::Symbol, val)
    if name === Symbol("documentation")
        OpenAPI.validate_param(name, "ErrorsErrorsInner", :format, val, "url")
    end
end
