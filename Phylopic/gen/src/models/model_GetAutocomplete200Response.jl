# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""getAutocomplete_200_response

    GetAutocomplete200Response(;
        build=nothing,
        _links=nothing,
        matches=nothing,
    )

    - build::Int64 : The index number of the build that this object belongs to.
    - _links::GetAutocomplete200ResponseAllOfLinks
    - matches::Vector{String} : Text matches for the query, found in node names.
"""
Base.@kwdef mutable struct GetAutocomplete200Response <: OpenAPI.APIModel
    build::Union{Nothing, Int64} = nothing
    _links = nothing # spec type: Union{ Nothing, GetAutocomplete200ResponseAllOfLinks }
    matches::Union{Nothing, Vector{String}} = nothing

    function GetAutocomplete200Response(build, _links, matches, )
        OpenAPI.validate_property(GetAutocomplete200Response, Symbol("build"), build)
        OpenAPI.validate_property(GetAutocomplete200Response, Symbol("_links"), _links)
        OpenAPI.validate_property(GetAutocomplete200Response, Symbol("matches"), matches)
        return new(build, _links, matches, )
    end
end # type GetAutocomplete200Response

const _property_types_GetAutocomplete200Response = Dict{Symbol,String}(Symbol("build")=>"Int64", Symbol("_links")=>"GetAutocomplete200ResponseAllOfLinks", Symbol("matches")=>"Vector{String}", )
OpenAPI.property_type(::Type{ GetAutocomplete200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetAutocomplete200Response[name]))}

function check_required(o::GetAutocomplete200Response)
    o.build === nothing && (return false)
    o._links === nothing && (return false)
    o.matches === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GetAutocomplete200Response }, name::Symbol, val)
end
