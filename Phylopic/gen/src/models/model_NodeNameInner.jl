# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NodeName_inner

    NodeNameInner(;
        class=nothing,
        text=nothing,
    )

    - class::String
    - text::String
"""
Base.@kwdef mutable struct NodeNameInner <: OpenAPI.APIModel
    class::Union{Nothing, String} = nothing
    text::Union{Nothing, String} = nothing

    function NodeNameInner(class, text, )
        OpenAPI.validate_property(NodeNameInner, Symbol("class"), class)
        OpenAPI.validate_property(NodeNameInner, Symbol("text"), text)
        return new(class, text, )
    end
end # type NodeNameInner

const _property_types_NodeNameInner = Dict{Symbol,String}(Symbol("class")=>"String", Symbol("text")=>"String", )
OpenAPI.property_type(::Type{ NodeNameInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NodeNameInner[name]))}

function check_required(o::NodeNameInner)
    o.class === nothing && (return false)
    o.text === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NodeNameInner }, name::Symbol, val)
    if name === Symbol("class")
        OpenAPI.validate_param(name, "NodeNameInner", :format, val, "^(citation|comment|operator|rank|scientific|vernacular)$")
    end
    if name === Symbol("text")
        OpenAPI.validate_param(name, "NodeNameInner", :format, val, "^\S+( \S+)*$")
    end
end
